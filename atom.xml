<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Doo Bui</title>
  
  
  <link href="https://dubydu.github.io/atom.xml" rel="self"/>
  
  <link href="https://dubydu.github.io/"/>
  <updated>2025-02-27T04:17:49.959Z</updated>
  <id>https://dubydu.github.io/</id>
  
  <author>
    <name>Doo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nvidia x Cuda x Linux Installation</title>
    <link href="https://dubydu.github.io/nvidia-cuda-linux/"/>
    <id>https://dubydu.github.io/nvidia-cuda-linux/</id>
    <published>2025-02-23T08:44:37.000Z</published>
    <updated>2025-02-27T04:17:49.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Verify-CUDA-Capable-GPU"><a href="#1-Verify-CUDA-Capable-GPU" class="headerlink" title="1. Verify CUDA-Capable GPU:"></a>1. Verify CUDA-Capable GPU:</h2><p><code>lspci | grep -i nvidia</code> </p><p>The output should be similar to the following:</p><blockquote><p>00:1e.0 3D controller: NVIDIA Corporation TU104GL [Tesla T4] (rev a1)</p></blockquote><h2 id="2-Verify-Supported-Version-of-Linux"><a href="#2-Verify-Supported-Version-of-Linux" class="headerlink" title="2. Verify Supported Version of Linux"></a>2. Verify Supported Version of Linux</h2><p><code>uname -m &amp;&amp; cat /etc/*release</code></p><p>The output should be similar to the following:</p><blockquote><p>x86_64<br>DISTRIB_ID=Ubuntu<br>DISTRIB_RELEASE=24.04<br>DISTRIB_CODENAME=noble<br>DISTRIB_DESCRIPTION=”Ubuntu 24.04.1 LTS”<br>PRETTY_NAME=”Ubuntu 24.04.1 LTS”<br>NAME=”Ubuntu”<br>VERSION_ID=”24.04”<br>VERSION=”24.04.1 LTS (Noble Numbat)”<br>VERSION_CODENAME=noble<br>ID=ubuntu<br>ID_LIKE=debian<br>HOME_URL=”<a href="https://www.ubuntu.com/&quot;">https://www.ubuntu.com/&quot;</a><br>SUPPORT_URL=”<a href="https://help.ubuntu.com/&quot;">https://help.ubuntu.com/&quot;</a><br>BUG_REPORT_URL=”<a href="https://bugs.launchpad.net/ubuntu/&quot;">https://bugs.launchpad.net/ubuntu/&quot;</a><br>PRIVACY_POLICY_URL=”<a href="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;">https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</a><br>UBUNTU_CODENAME=noble<br>LOGO=ubuntu-logo</p></blockquote><h2 id="3-Verify-the-System-Has-gcc-Installed"><a href="#3-Verify-the-System-Has-gcc-Installed" class="headerlink" title="3. Verify the System Has gcc Installed"></a>3. Verify the System Has gcc Installed</h2><p><code>gcc --version</code></p><p>The output should be similar to the following:</p><blockquote><p>gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0</p></blockquote><h2 id="4-Driver-Installer"><a href="#4-Driver-Installer" class="headerlink" title="4. Driver Installer"></a>4. Driver Installer</h2><p><code>sudo apt-get install -y nvidia-open</code></p><h2 id="5-CUDA-Toolkit-Installer"><a href="#5-CUDA-Toolkit-Installer" class="headerlink" title="5. CUDA Toolkit Installer"></a>5. CUDA Toolkit Installer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda_12.8.0_570.86.10_linux.run</span><br><span class="line"></span><br><span class="line">sudo sh cuda_12.8.0_570.86.10_linux.run</span><br></pre></td></tr></table></figure><p>The output looks like this, just choose <code>Continue</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Existing package manager installation of the driver found. It is strongly    │</span><br><span class="line">│ recommended that you remove this before continuing.                          │</span><br><span class="line">│ Abort                                                                        │</span><br><span class="line">│ Continue                                                                     │</span><br><span class="line">│                                                                              │</span><br></pre></td></tr></table></figure><p>Accept the EULA:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│  End User License Agreement                                                  │</span><br><span class="line">│  --------------------------                                                  │</span><br><span class="line">│                                                                              │</span><br><span class="line">│  NVIDIA Software License Agreement and CUDA Supplement to                    │</span><br><span class="line">│  Software License Agreement. Last updated: October 8, 2021                   │</span><br><span class="line">│                                                                              │</span><br><span class="line">│  The CUDA Toolkit End User License Agreement applies to the                  │</span><br><span class="line">│  NVIDIA CUDA Toolkit, the NVIDIA CUDA Samples, the NVIDIA                    │</span><br><span class="line">│  Display Driver, NVIDIA Nsight tools (Visual Studio Edition),                │</span><br><span class="line">│  and the associated documentation on CUDA APIs, programming                  │</span><br><span class="line">│  model and development tools. If you do not agree with the                   │</span><br><span class="line">│  terms and conditions of the license agreement, then do not                  │</span><br><span class="line">│  download or use the software.                                               │</span><br><span class="line">│                                                                              │</span><br><span class="line">│  Last updated: October 8, 2021.                                              │</span><br><span class="line">│                                                                              │</span><br><span class="line">│                                                                              │</span><br><span class="line">│  Preface                                                                     │</span><br><span class="line">│  -------                                                                     │</span><br><span class="line">│                                                                              │</span><br><span class="line">│──────────────────────────────────────────────────────────────────────────────│</span><br><span class="line">│ Do you accept the above EULA? (accept/decline/quit):                         │</span><br><span class="line">│ accept                                                                       </span><br></pre></td></tr></table></figure><p>Unselect the video driver by pressing the Spacebar while [X] Driver is highlighted:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ CUDA Installer                                                               │</span><br><span class="line">│ - [ ] Driver                                                                 │</span><br><span class="line">│      [ ] 495.29.05                                                           │</span><br><span class="line">│ + [X] CUDA Toolkit 12.8                                                      │</span><br><span class="line">│   [X] CUDA Samples 12.8                                                      │</span><br><span class="line">│   [X] CUDA Demo Suite 12.8                                                   │</span><br><span class="line">│   [X] CUDA Documentation 12.5                                                │</span><br><span class="line">│   Options                                                                    │</span><br><span class="line">│   Install                                                                    │</span><br><span class="line">│                                                                              │</span><br><span class="line">│ Up/Down: Move | Left/Right: Expand | &#x27;Enter&#x27;: Select | &#x27;A&#x27;: Advanced options │</span><br></pre></td></tr></table></figure><p>Then press the down arrow to Install. Press Enter then wait for installation to complete.<br>After the installation is complete add the following to the bottom of your <code>~/.profile</code> or add it to the <code>/etc/profile.d/cuda.sh</code> file which you might have to create for all users (global)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># set PATH for cuda 12.8 installation</span><br><span class="line">if [ -d &quot;/usr/local/cuda-12.8/bin/&quot; ]; then</span><br><span class="line">    export PATH=/usr/local/cuda-12.8/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class="line">    export LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="6-Reboot-the-system"><a href="#6-Reboot-the-system" class="headerlink" title="6. Reboot the system"></a>6. Reboot the system</h2><p><code>sudo reboot</code></p><h2 id="7-Remove-Outdated-Signing-Key-Optional"><a href="#7-Remove-Outdated-Signing-Key-Optional" class="headerlink" title="7. Remove Outdated Signing Key: (Optional)"></a>7. Remove Outdated Signing Key: (Optional)</h2><p><code>sudo apt-key del 7fa2af80</code></p><h2 id="8-Update-the-Apt-repository-cache"><a href="#8-Update-the-Apt-repository-cache" class="headerlink" title="8. Update the Apt repository cache"></a>8. Update the Apt repository cache</h2><p><code>sudo apt-get update</code></p><h2 id="9-Install-the-cuDNN-library"><a href="#9-Install-the-cuDNN-library" class="headerlink" title="9. Install the cuDNN library"></a>9. Install the cuDNN library</h2><p>These are the installation instructions for Debian 11, Ubuntu 18.04, Ubuntu 20.04, 22.04, and 24.04 users.</p><p><strong>Approach 1: Specific for ubuntu1804</strong></p><ol><li>Enable the repository:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /&quot; | sudo tee /etc/apt/sources.list.d/cuda_learn.list</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --fetch-keys  http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li> Install the cuDNN library:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libcudnn8</span><br></pre></td></tr></table></figure><p><strong>Approach 2:</strong></p><ol><li>Enable the repository:</li></ol><p>Where ${OS} is debian11, ubuntu1804, ubuntu2004, ubuntu2204, or ubuntu2404.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/$&#123;OS&#125;/x86_64/cuda-$&#123;OS&#125;.pin </span><br><span class="line"></span><br><span class="line">sudo mv cuda-$&#123;OS&#125;.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/$&#123;OS&#125;/x86_64/3bf863cc.pub</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository &quot;deb https://developer.download.nvidia.com/compute/cuda/repos/$&#123;OS&#125;/x86_64/ /&quot;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li> Install the cuDNN library:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcudnn8=$&#123;cudnn_version&#125;-1+$&#123;cuda_version&#125;</span><br><span class="line">sudo apt-get install libcudnn8-dev=$&#123;cudnn_version&#125;-1+$&#123;cuda_version&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Where:</p><ul><li>${cudnn_version} is 8.9.0.*</li><li>${cuda_version} is cuda12.1 or cuda11.8</li></ul><h2 id="10-Reboot-the-system"><a href="#10-Reboot-the-system" class="headerlink" title="10. Reboot the system"></a>10. Reboot the system</h2><p><code>sudo reboot</code></p><h2 id="11-Verifying-the-Install-on-Linux"><a href="#11-Verifying-the-Install-on-Linux" class="headerlink" title="11. Verifying the Install on Linux"></a>11. Verifying the Install on Linux</h2><p><code>nvcc -V</code></p><p>The output should be similar to the following:</p><blockquote><p>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2025 NVIDIA Corporation<br>Built on Wed_Jan_15_19:20:09_PST_2025<br>Cuda compilation tools, release 12.8, V12.8.61<br>Build cuda_12.8.r12.8/compiler.35404655_0</p></blockquote><p>References:</p><ol><li><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#about-this-document">https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#about-this-document</a></li><li><a href="https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-890/install-guide/index.html">https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-890/install-guide/index.html</a></li><li><a href="https://askubuntu.com/questions/1077061/how-do-i-install-nvidia-and-cuda-drivers-into-ubuntu">https://askubuntu.com/questions/1077061/how-do-i-install-nvidia-and-cuda-drivers-into-ubuntu</a></li><li><a href="https://gist.github.com/dubydu/7198858c3542b64740e7e254087ac627">cuda-installation.sh</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Verify-CUDA-Capable-GPU&quot;&gt;&lt;a href=&quot;#1-Verify-CUDA-Capable-GPU&quot; class=&quot;headerlink&quot; title=&quot;1. Verify CUDA-Capable GPU:&quot;&gt;&lt;/a&gt;1. Verify</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Add Flutter to Your Existing App</title>
    <link href="https://dubydu.github.io/flutter-module/"/>
    <id>https://dubydu.github.io/flutter-module/</id>
    <published>2024-08-23T14:02:30.000Z</published>
    <updated>2025-02-23T13:13:53.396Z</updated>
    
    <content type="html"><![CDATA[<p>Developing mobile applications using cross-platform frameworks like Flutter has become very popular in recent years, with many large projects successfully leveraging its benefits. Starting a new app from scratch with Flutter is straightforward, but what if you already have a native app with complex business logic and UI, and now you want to switch entirely to Flutter, it might not be feasible all at once, right?</p><p>That’s why the Flutter team introduced an approach called “Add-to-App,” a.k.a Flutter Module. With this approach, you can gradually integrate new UI or non-UI logic into your existing native app as a module, and this module is rendered separately from the existing app using the Flutter engine.</p><p>Add-to-App is currently supported on Android, iOS, and the web, with a similar methodology across these platforms. In this article, I will focus on the iOS platform and demonstrate how it works.</p><h2 id="1-Generate-the-Flutter-module-project"><a href="#1-Generate-the-Flutter-module-project" class="headerlink" title="1. Generate the Flutter module project."></a>1. Generate the Flutter module project.</h2><p>Let’s create a Flutter module first.                         </p><p><code>flutter create --template module my_flutter</code></p><p>The structure of this project is quite similar to a non-module project. This is where you develop new features using the Flutter framework. You might notice the <code>.ios/</code> subfolder, which is autogenerated and doesn’t affect your existing native source code. Its sole purpose is to allow you to run a standalone version of your module on iOS.</p><p>You might want to take a look at this <a href="https://github.com/dubydu/add-to-app/tree/main">repository</a>, it can help you better understand how to use Method Channels to communicate with the native app, as well as how to define the entry points that allow the native app to interact with the modules.</p><h2 id="2-Embed-a-Flutter-module-in-your-iOS-app"><a href="#2-Embed-a-Flutter-module-in-your-iOS-app" class="headerlink" title="2. Embed a Flutter module in your iOS app."></a>2. Embed a Flutter module in your iOS app.</h2><p>Once you have completed the module development process, you can embed it into the existing native app using the following methods:</p><ol><li><a href="https://docs.flutter.dev/add-to-app/ios/project-setup#method-a">Use CocoaPods</a>.</li><li><a href="https://docs.flutter.dev/add-to-app/ios/project-setup#method-b">Use iOS frameworks</a>.</li><li><a href="https://docs.flutter.dev/add-to-app/ios/project-setup#method-c">Use CocoaPods and iOS frameworks</a>.</li></ol><p>The advantages of these methods are well explained in the documents, so I will point out the disadvantages from my own experience. After working with these methods for a few months, I noticed that embedding frameworks is quite complicated, increases the size of the source code, is time-consuming, and involves numerous file changes with every new release which is a huge mess with <code>.xcodeproj</code>. Additionally, unexpected errors occur occasionally and importantly - I don’t like working with these methods locally.</p><p>So, I came up with a fourth method that leverages the third one, but I will implement it remotely to address the disadvantages I mentioned earlier. My method is also beneficial if you want to use Flutter modules across multiple native apps from a single source. For example, if your company has multiple native apps managed by different teams and now wants to develop a new Chat/Video feature using Flutter Modules and then integrate it into all the native apps, you wouldn’t want to copy-paste the modules to each team, right? Technically, you could, but that would be a mid approach. Let’s stick with my new method and see how it resolves this issue.</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h3><p><code>flutter build ios-framework --output=archive/ --cocoapods [--no-profile] [--no-debug] [--no-release]</code></p><p>There are three build modes. You can use <code>--no-profile</code> and <code>--no-debug</code> to run the app on a real device and to prepare it for release. Alternatively, you can use <code>--no-profile</code> and <code>--no-release</code> to run the app on the simulator. If you use these options incorrectly, you might encounter a white freeze screen.</p><p>After a few seconds of running the command above, you will see new <code>.frameworks</code> and <code>Flutter.podspec</code> files generated inside the <code>/archive</code> folder. Move these frameworks (excluding Flutter.podspec) to your custom folder, like this:</p><img src="/flutter-module/1.png" class="" title="flutter-module-folder-structure"><blockquote><p>You will use the Flutter.podspec file in the next step, so make sure not to remove it.</p></blockquote><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h3><p>Now, commit these changes, push them to your remote repository, and create a Git tag for the commit. You can use this tag to specify the version of your module.</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3:"></a>Step 3:</h3><p>Move to the existing native source code and create a new folder named <code>Flutter</code> inside the root directory with the following structure:</p><img src="/flutter-module/2.png" class="" title="ios-folder-structure"><p><strong>Flutter.podspec</strong> is the file you generated in the previous step, so copy and paste it here.<br><strong>Module.podspec</strong> is a new file that enables you to pull Flutter modules from the cloud into the native source code. Here are the details of this file.</p><script src="https://gist.github.com/dubydu/55d3d748351bfae6e64663a0c6c37bac.js"></script><hr><p>Update your Podfile by adding these two lines, then run <code>pod install</code> to apply the changes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;Flutter&#x27;, :podspec =&gt; &#x27;./Flutter/Flutter.podspec&#x27;</span><br><span class="line">pod &#x27;Module&#x27;, :podspec =&gt; &#x27;./Flutter/Module.podspec&#x27;</span><br></pre></td></tr></table></figure><p><strong>Pitfall</strong>: If you encounter any issues during the installation process, run <code>pod deintegrate</code> followed by <code>pod install</code> again.</p><p>That’s it! Now you can use your modules just as you would with external frameworks using CocoaPods. I believe this methodology will also work with other dependency managers like <a href="https://github.com/Carthage/Carthage">Carthage</a> or <a href="https://github.com/swiftlang/swift-package-manager">Swift Package Manager</a> or even <a href="https://maven.google.com/">Maven</a> for Android. Would you like to give it a try?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Developing mobile applications using cross-platform frameworks like Flutter has become very popular in recent years, with many large proj</summary>
      
    
    
    
    
    <category term="flutter" scheme="https://dubydu.github.io/tags/flutter/"/>
    
    <category term="module" scheme="https://dubydu.github.io/tags/module/"/>
    
    <category term="mobile" scheme="https://dubydu.github.io/tags/mobile/"/>
    
  </entry>
  
</feed>
